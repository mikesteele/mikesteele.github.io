{"version":3,"sources":["Image.js","index.js"],"names":["Image","url","texture","opacity","scale","useMemo","THREE","load","attach","object","MorphCube","props","previousShape","shape","cube1Ref","useRef","useFrame","current","rotation","x","y","shapes","cube","xScale","zScale","zPosition","xRotation","dc","none","from","to","ref","position","args","color","wireframe","ReactDOM","render","React","useState","setShapes","href","className","onMouseOver","e","onMouseOut","camera","intensity","angle","penumbra","castShadow","document","getElementById"],"mappings":"qQAYeA,MATf,YAAmD,IAAlCC,EAAiC,EAAjCA,IACTC,GAD0C,EAA5BC,QAA4B,EAAnBC,MAAmB,yCAChCC,mBAAQ,kBAAM,IAAIC,KAAsBC,KAAKN,KAAM,CAACA,KACpE,OACE,yCAAqBO,OAAO,YAC1B,+BAAWA,OAAO,MAAMC,OAAQP,M,QCAhCQ,EAAY,SAAAC,GAAU,IAClBC,EAAyBD,EAAzBC,cAAeC,EAAUF,EAAVE,MACjBC,EAAWC,mBAEjBC,aAAS,WACO,SAAVH,IACFC,EAASG,QAAQC,SAASC,EAAIL,EAASG,QAAQC,SAASC,EAAI,IAC5DL,EAASG,QAAQC,SAASE,EAAIN,EAASG,QAAQC,SAASE,EAAI,QAIhE,IAAMC,EAAS,CACbC,KAAM,CACJC,OAAQ,EACRC,OAAQ,EACRC,UAAW,EACXC,UAAW,GAEbC,GAAI,CACFJ,OAAQ,IACRC,OAAQ,GACRC,UAAW,EACXC,UAAW,GAEbE,KAAM,CACJL,OAAQ,IACRC,OAAQ,IACRC,WAAY,GACZC,WAAY,IAIhB,OACE,kBAAC,SAAD,CACEG,KAAM,CACJN,OAAQF,EAAOT,GAAeW,OAC9BC,OAAQH,EAAOT,GAAeY,OAC9BC,UAAWJ,EAAOT,GAAea,UACjCC,UAAWL,EAAOT,GAAec,WAEnCI,GAAI,CACFP,OAAQF,EAAOR,GAAOU,OACtBC,OAAQH,EAAOR,GAAOW,OACtBC,UAAWJ,EAAOR,GAAOY,UACzBC,UAAWL,EAAOR,GAAOa,aAG1B,SAAAf,GAAK,OACJ,0BAAMoB,IAAKjB,EAAUkB,SAAU,CAAC,EAAE,EAAErB,EAAMc,WAAYP,SAAU,CAACP,EAAMe,UAAW,EAAG,IACnF,uCAAmBlB,OAAO,WAAWyB,KAAM,CAACtB,EAAMY,OAAQ,EAAGZ,EAAMa,UACxD,SAAVX,EACC,wCAAoBqB,MAAM,QAAQC,WAAS,EAAC3B,OAAO,aAEnD,kBAAC,EAAD,CAAOP,IAAI,YAEb,uCAAmBO,OAAO,WAAWyB,KAAM,CAACtB,EAAMY,OAAQ,EAAGZ,EAAMa,eAwC7EY,IAASC,OAAO,mBAjCJ,WAAO,IAAD,EACYC,IAAMC,SAAS,CACzC1B,MAAO,OACPD,cAAe,SAHD,mBACTS,EADS,KACDmB,EADC,KAiBhB,OACE,oCACE,uBAAGC,KAAK,+CACP,yBAAKC,UAAU,QAAQC,YAfN,SAAAC,GACpBJ,GAAU,SAAAnB,GAAM,MAAK,CACnBT,cAAeS,EAAOR,MACtBA,MAAO,UAY6CgC,WATnC,SAAAD,GACnBJ,GAAU,SAAAnB,GAAM,MAAK,CACnBT,cAAeS,EAAOR,MACtBA,MAAO,aAMN,kBAID,kBAAC,IAAD,CAAQiC,OAAQ,CAAEd,SAAU,CAAC,EAAG,EAAG,KACjC,kCAAce,UAAW,KACzB,+BAAWA,UAAW,GAAKf,SAAU,CAAC,GAAI,GAAI,IAAKgB,MAAO,GAAKC,SAAU,EAAGC,YAAU,IACtF,kBAAC,EAAD,CAAWrC,MAAOQ,EAAOR,MAAOD,cAAeS,EAAOT,oBAM9C,MAASuC,SAASC,eAAe,W","file":"static/js/main.3dbed0db.chunk.js","sourcesContent":["import * as THREE from 'three/src/Three'\nimport React, { useMemo } from 'react'\n\nfunction Image({ url, opacity, scale, ...props }) {\n  const texture = useMemo(() => new THREE.TextureLoader().load(url), [url])\n  return (\n    <meshLambertMaterial attach=\"material\" >\n      <primitive attach=\"map\" object={texture} />\n    </meshLambertMaterial>\n  )\n}\n\nexport default Image;\n","import React, { useRef } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport './index.css';\nimport Image from './Image';\nimport { Spring } from 'react-spring/renderprops'\n\nconst MorphCube = props => {\n  const { previousShape, shape } = props\n  const cube1Ref = useRef()\n\n  useFrame(() => {\n    if (shape === 'cube') {\n      cube1Ref.current.rotation.x = cube1Ref.current.rotation.x + 0.01\n      cube1Ref.current.rotation.y = cube1Ref.current.rotation.y + 0.01\n    }\n  });\n\n  const shapes = {\n    cube: {\n      xScale: 1,\n      zScale: 1,\n      zPosition: 0,\n      xRotation: 1\n    },\n    dc: {\n      xScale: 1.6,\n      zScale: 0.1,\n      zPosition: 1,\n      xRotation: 0\n    },\n    none: {\n      xScale: 0.01,\n      zScale: 0.01,\n      zPosition: -10,\n      xRotation: -1\n    }\n  }\n\n  return (\n    <Spring\n      from={{\n        xScale: shapes[previousShape].xScale,\n        zScale: shapes[previousShape].zScale,\n        zPosition: shapes[previousShape].zPosition,\n        xRotation: shapes[previousShape].xRotation\n      }}\n      to={{\n        xScale: shapes[shape].xScale,\n        zScale: shapes[shape].zScale,\n        zPosition: shapes[shape].zPosition,\n        xRotation: shapes[shape].xRotation\n      }}\n    >\n      {props => (\n        <mesh ref={cube1Ref} position={[0,0,props.zPosition]} rotation={[props.xRotation, 0, 0]}>\n          <boxBufferGeometry attach=\"geometry\" args={[props.xScale, 1, props.zScale]} />\n          {shape === 'cube' ? (\n            <meshNormalMaterial color=\"white\" wireframe attach=\"material\" />\n          ): (\n            <Image url=\"/dc.png\" />\n          )}\n          <boxBufferGeometry attach=\"geometry\" args={[props.xScale, 1, props.zScale]} />\n        </mesh>\n      )}\n      </Spring>\n  )\n}\n\nconst App = () => {\n  const [shapes, setShapes] = React.useState({\n    shape: 'cube',\n    previousShape: 'none'\n  });\n  const onMouseOverDC = e => {\n    setShapes(shapes => ({\n      previousShape: shapes.shape,\n      shape: 'dc'\n    }));\n  }\n  const onMouseOutDC = e => {\n    setShapes(shapes => ({\n      previousShape: shapes.shape,\n      shape: 'cube'\n    }));\n  }\n  return (\n    <>\n      <a href=\"https://github.com/mikesteele/dual-captions\">\n       <div className='links' onMouseOver={onMouseOverDC} onMouseOut={onMouseOutDC}>\n          dual-captions\n        </div>\n      </a>\n      <Canvas camera={{ position: [0, 0, 2] }}>\n        <ambientLight intensity={0.5} />\n        <spotLight intensity={0.6} position={[30, 30, 50]} angle={0.2} penumbra={1} castShadow />\n        <MorphCube shape={shapes.shape} previousShape={shapes.previousShape} />\n      </Canvas>\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}