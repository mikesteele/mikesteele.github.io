{"version":3,"sources":["Section.js","FormFactorAnimation.js","App.js","serviceWorker.js","index.js","Section.module.css"],"names":["Section","className","s","Wrapper","youtubePlayerStyles","width","height","top","left","netflixPlayerStyles","youtubeActionButtonStyles","netflixActionButtonStyles","youtubeTitleStyle","netflixTitleStyle","netflixActionPanelStyles","youtubeActionPanelStyles","YoutubeRecs","props","recStyle","border","position","right","borderRadius","transition","opacity","in","display","firstRecStyle","secondRecStyle","thirdRecStyle","style","FormFactorAnimation","state","isNetflix","this","interval","window","setInterval","setState","clearInterval","playerStyles","actionPanelStyles","actionButtonStyles","marginBottom","titleStyles","React","Component","App","Boolean","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"wOAKeA,EAFC,kBAAM,yBAAKC,UAAWC,IAAEC,SAAlB,Q,mmBCDtB,IAAMC,EAAsB,CAC1BC,MAAO,IACPC,OAAQ,IACRC,IAAK,GACLC,KAAM,IAGFC,EAAsB,CAC1BJ,MAAO,IACPC,OAAQ,IACRC,KAAM,EACNC,MAAO,GAGHE,EAA4B,CAChCL,MAAO,GACPC,OAAQ,IAGJK,EAA4B,CAChCN,MAAO,GACPC,OAAQ,IAGJM,EAAoB,CACxBL,IAAK,IACLC,KAAM,IAGFK,EAAoB,CACxBN,IAAK,GACLC,KAAM,IAGFM,EAA2B,CAC/BP,IAAK,GACLC,KAAM,IAGFO,EAA2B,CAC/BR,IAAK,GACLC,KAAM,IAGFQ,EAAc,SAAAC,GAClB,IAAMC,EAAW,CACfC,OAAQ,sBACRd,MAAO,GACPC,OAAQ,GACRc,SAAU,WACVC,MAAO,GACPd,IAAK,GACLe,aAAc,EACdC,WAAY,QACZC,QAASP,EAAMQ,GAAK,EAAI,EACxBC,QAAS,QAELC,EAAa,KACdT,EADc,CAEjBX,IAAK,KAEDqB,EAAc,KACfV,EADe,CAElBX,IAAK,KAEDsB,EAAa,KACdX,EADc,CAEjBX,IAAK,MAEP,OACE,oCACE,yBAAKuB,MAAOH,IACZ,yBAAKG,MAAOF,IACZ,yBAAKE,MAAOD,MA8FHE,E,2MAxFbC,MAAQ,CACNC,WAAW,G,mFAGQ,IAAD,OAClBC,KAAKC,SAAWC,OAAOC,aAAY,WACjC,EAAKC,UAAS,SAAAN,GAAK,MAAK,CACtBC,WAAYD,EAAMC,gBAEnB,O,6CAIHG,OAAOG,cAAcL,KAAKC,Y,+BAI1B,IAOIK,EAAe,CACjBrB,OAAQ,sBACRG,aAAc,EACdF,SAAU,WACVG,WAAY,SAEVkB,EAAoB,CACtBpC,MAAO,GACPC,OAAQ,GACRc,SAAU,WACVG,WAAY,SAEVmB,EAAqB,CACvBrC,MAAO,GACPC,OAAQ,GACRgB,aAAc,MACdH,OAAQ,kBACRwB,aAAc,EACdpB,WAAY,SAEVqB,EAAc,CAChBtC,OAAQ,GACRD,MAAO,IACPc,OAAQ,sBACRC,SAAU,WACVG,WAAY,QACZG,QAAS,QAEHO,EAAcC,KAAKF,MAAnBC,UAkBR,OAjBIA,GACFO,EAAY,KAAQA,EAAR,GAAyB/B,GACrCiC,EAAkB,KACbA,EADa,GAEb/B,GAELiC,EAAW,KAAQA,EAAR,GAAwB/B,GACnC4B,EAAiB,KAAQA,EAAR,GAA8B3B,KAE/C0B,EAAY,KAAQA,EAAR,GAAyBpC,GACrCsC,EAAkB,KACbA,EADa,GAEbhC,GAELkC,EAAW,KAAQA,EAAR,GAAwBhC,GACnC6B,EAAiB,KAAQA,EAAR,GAA8B1B,IAG/C,oCACE,yBAAKe,MAvDU,CACjBzB,MAAO,IACPC,OAAQ,IACRa,OAAQ,sBACRC,SAAU,WACVE,aAAc,IAmDV,yBAAKQ,MAAOU,GACV,yBAAKV,MAAOW,GACV,yBAAKX,MAAOY,IACZ,yBAAKZ,MAAOY,IACZ,yBAAKZ,MAAOY,MAGhB,yBAAKZ,MAAOc,IACZ,kBAAC,EAAD,CAAanB,IAAKQ,U,GAlFMY,IAAMC,WCnEzBC,MATf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2HlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBElInBC,EAAOC,QAAU,CAAC,QAAU,4B","file":"static/js/main.44975625.chunk.js","sourcesContent":["import React from 'react';\nimport s from './Section.module.css';\n\nconst Section = () => <div className={s.Wrapper}>:-)</div>\n\nexport default Section;\n","import React from \"react\";\n\nconst youtubePlayerStyles = {\n  width: 200,\n  height: 150,\n  top: 20,\n  left: 20\n};\n\nconst netflixPlayerStyles = {\n  width: 350,\n  height: 250,\n  top: -2,\n  left: -2\n};\n\nconst youtubeActionButtonStyles = {\n  width: 16,\n  height: 16\n};\n\nconst netflixActionButtonStyles = {\n  width: 30,\n  height: 30\n};\n\nconst youtubeTitleStyle = {\n  top: 185,\n  left: 20\n};\n\nconst netflixTitleStyle = {\n  top: 10,\n  left: 20\n};\n\nconst netflixActionPanelStyles = {\n  top: 50,\n  left: 10\n};\n\nconst youtubeActionPanelStyles = {\n  top: 10,\n  left: 10\n};\n\nconst YoutubeRecs = props => {\n  const recStyle = {\n    border: \"2px solid lightgrey\",\n    width: 80,\n    height: 40,\n    position: \"absolute\",\n    right: 20,\n    top: 20,\n    borderRadius: 4,\n    transition: \"300ms\",\n    opacity: props.in ? 1 : 0,\n    display: \"none\"\n  };\n  const firstRecStyle = {\n    ...recStyle,\n    top: 20\n  };\n  const secondRecStyle = {\n    ...recStyle,\n    top: 80\n  };\n  const thirdRecStyle = {\n    ...recStyle,\n    top: 140\n  };\n  return (\n    <>\n      <div style={firstRecStyle} />\n      <div style={secondRecStyle} />\n      <div style={thirdRecStyle} />\n    </>\n  );\n};\n\nclass FormFactorAnimation extends React.Component {\n  state = {\n    isNetflix: false\n  };\n\n  componentDidMount() {\n    this.interval = window.setInterval(() => {\n      this.setState(state => ({\n        isNetflix: !state.isNetflix\n      }));\n    }, 2000); // TODO - Revert 2000\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.interval);\n  }\n\n  render() {\n    const baseStyles = {\n      width: 350,\n      height: 250,\n      border: \"2px solid lightgrey\",\n      position: \"relative\",\n      borderRadius: 4\n    };\n    let playerStyles = {\n      border: \"2px solid lightgrey\",\n      borderRadius: 4,\n      position: \"absolute\",\n      transition: \"300ms\"\n    };\n    let actionPanelStyles = {\n      width: 25,\n      height: 25,\n      position: \"absolute\",\n      transition: \"300ms\"\n    };\n    let actionButtonStyles = {\n      width: 20,\n      height: 20,\n      borderRadius: \"50%\",\n      border: \"2px solid black\",\n      marginBottom: 8,\n      transition: \"300ms\"\n    };\n    let titleStyles = {\n      height: 14,\n      width: 160,\n      border: \"2px solid lightgrey\",\n      position: \"absolute\",\n      transition: \"300ms\",\n      display: \"none\"\n    };\n    const { isNetflix } = this.state;\n    if (isNetflix) {\n      playerStyles = { ...playerStyles, ...netflixPlayerStyles };\n      actionButtonStyles = {\n        ...actionButtonStyles,\n        ...netflixActionButtonStyles\n      };\n      titleStyles = { ...titleStyles, ...netflixTitleStyle };\n      actionPanelStyles = { ...actionPanelStyles, ...netflixActionPanelStyles };\n    } else {\n      playerStyles = { ...playerStyles, ...youtubePlayerStyles };\n      actionButtonStyles = {\n        ...actionButtonStyles,\n        ...youtubeActionButtonStyles\n      };\n      titleStyles = { ...titleStyles, ...youtubeTitleStyle };\n      actionPanelStyles = { ...actionPanelStyles, ...youtubeActionPanelStyles };\n    }\n    return (\n      <>\n        <div style={baseStyles}>\n          <div style={playerStyles}>\n            <div style={actionPanelStyles}>\n              <div style={actionButtonStyles} />\n              <div style={actionButtonStyles} />\n              <div style={actionButtonStyles} />\n            </div>\n          </div>\n          <div style={titleStyles} />\n          <YoutubeRecs in={!isNetflix} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default FormFactorAnimation;\n","import React from 'react';\nimport Section from './Section';\nimport FormFactorAnimation from './FormFactorAnimation';\n\nfunction App() {\n  return (\n    <>\n      <Section />\n      <FormFactorAnimation/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-snapshot';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Section_Wrapper__2l30V\"};"],"sourceRoot":""}