{"version":3,"sources":["index.js"],"names":["useSpringYPosition","ref","toValue","springAmount","useFrame","current","position","y","Math","abs","useSpringXScale","scale","x","useSpringXRotation","rotation","Thing","props","previousShape","shape","cube1Ref","useRef","cube2Ref","cube1YPosition","none","cube","dc","cube2YPosition","cube1XScale","cube2XScale","cube1XRotation","cube2XRotation","springAmountForFrameCount","oldValue","newValue","frameCount","attach","args","color","wireframe","ReactDOM","render","React","useState","setShape","setPreviousShape","className","onMouseOver","e","onMouseOut","href","document","getElementById"],"mappings":"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","file":"static/js/main.8c45416b.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport './index.css';\n\nconst useSpringYPosition = (ref, toValue, springAmount) => {\n  useFrame(() => {\n    if (ref.current) {\n      if (ref.current.position.y === toValue) {\n        return\n      } else if (Math.abs(ref.current.position.y - toValue) <= springAmount) {\n        ref.current.position.y = toValue\n      } else if (ref.current.position.y < toValue) {\n        ref.current.position.y = ref.current.position.y + springAmount\n      } else if (ref.current.position.y > toValue) {\n        ref.current.position.y = ref.current.position.y - springAmount\n      }\n    }\n  })\n}\n\nconst useSpringXScale = (ref, toValue, springAmount) => {\n  useFrame(() => {\n    if (ref.current) {\n      if (ref.current.scale.x === toValue) {\n        return\n      } else if (Math.abs(ref.current.scale.x - toValue) <= springAmount) {\n        ref.current.scale.x = toValue\n      } else if (ref.current.scale.x < toValue) {\n        ref.current.scale.x = ref.current.scale.x + springAmount\n      } else if (ref.current.scale.x > toValue) {\n        ref.current.scale.x = ref.current.scale.x - springAmount\n      }\n    }\n  })\n}\n\nconst useSpringXRotation = (ref, toValue, springAmount) => {\n  useFrame(() => {\n    if (ref.current) {\n      if (ref.current.rotation.x === toValue) {\n        return\n      } else if (Math.abs(ref.current.rotation.x - toValue) <= springAmount) {\n        ref.current.rotation.x = toValue\n      } else if (ref.current.rotation.x < toValue) {\n        ref.current.rotation.x = ref.current.rotation.x + springAmount\n      } else if (ref.current.rotation.x > toValue) {\n        ref.current.rotation.x = ref.current.rotation.x - springAmount\n      }\n    }\n  })\n}\n\nconst useSpringZRotation = (ref, toValue, springAmount) => {\n  useFrame(() => {\n    if (ref.current) {\n      if (ref.current.rotation.cube1ZRotation === toValue) {\n        return\n      } else if (Math.abs(ref.current.rotation.z - toValue) <= springAmount) {\n        ref.current.rotation.z = toValue\n      } else if (ref.current.rotation.z < toValue) {\n        ref.current.rotation.z = ref.current.rotation.z + springAmount\n      } else if (ref.current.rotation.z > toValue) {\n        ref.current.rotation.z = ref.current.rotation.z - springAmount\n      }\n    }\n  })\n}\nfunction Thing(props) {\n  const { previousShape, shape } = props\n  const cube1Ref = useRef()\n  const cube2Ref = useRef()\n  const cube1YPosition = {\n    none: 0,\n    cube: 0.25,\n    dc: 0.5\n  }\n\n  const cube2YPosition = {\n    none: 0,\n    cube: -0.25,\n    dc: -0.5\n  }\n\n  const cube1XScale = {\n    none: 1,\n    cube: 1,\n    dc: 2.5\n  }\n\n  const cube2XScale = {\n    none: 1,\n    cube: 1,\n    dc: 2\n  }\n\n  const cube1XRotation = {\n    none: 0,\n    cube: 0,\n    dc: -0.4\n  }\n\n  const cube2XRotation = {\n    none: 0,\n    cube: 0,\n    dc: -0.4\n  }\n\n  const springAmountForFrameCount = (oldValue, newValue, frameCount) => {\n    return Math.abs((newValue - oldValue) / frameCount)\n  }\n\n  // Cube 1 springs\n  useSpringYPosition(cube1Ref, cube1YPosition[shape], springAmountForFrameCount(cube1YPosition[previousShape], cube1YPosition[shape], 15))\n  useSpringXScale(cube1Ref, cube1XScale[shape], springAmountForFrameCount(cube1XScale[previousShape], cube1XScale[shape], 15))\n  useSpringXRotation(cube1Ref, cube1XRotation[shape], springAmountForFrameCount(cube1XRotation[previousShape], cube1XRotation[shape], 15))\n\n  // Cube 2 springs\n  useSpringYPosition(cube2Ref, cube2YPosition[shape], springAmountForFrameCount(cube2YPosition[previousShape], cube2YPosition[shape], 15))\n  useSpringXScale(cube2Ref, cube2XScale[shape], springAmountForFrameCount(cube2XScale[previousShape], cube2XScale[shape], 15))\n  useSpringXRotation(cube2Ref, cube2XRotation[shape], springAmountForFrameCount(cube2XRotation[previousShape], cube2XRotation[shape], 15))\n\n  useFrame(() => {\n    cube1Ref.current.rotation.y = cube1Ref.current.rotation.y + 0.01\n    cube2Ref.current.rotation.y = cube2Ref.current.rotation.y + 0.01\n  });\n\n  const color =  'white';\n\n  return (\n    <>\n      <mesh ref={cube1Ref}>\n        <boxBufferGeometry attach=\"geometry\" args={[1, 0.5, 1]} />\n        <meshBasicMaterial color={color}  wireframe={shape === 'dc'}  attach=\"material\" />\n      </mesh>\n      <mesh ref={cube2Ref}>\n        <boxBufferGeometry attach=\"geometry\" args={[1, 0.5, 1]} />\n        <meshBasicMaterial color={color} wireframe={shape === 'dc'} attach=\"material\" />\n      </mesh>\n    </>\n  )\n}\n\nconst App = () => {\n  const [shape, setShape] = React.useState('cube')\n  const [previousShape, setPreviousShape] = React.useState('none')\n  const onMouseOver = e => {\n    setPreviousShape('cube')\n    setShape('dc')\n  }\n  const onMouseOut = e => {\n    setPreviousShape('dc')\n    setShape('cube')\n  }\n  return (\n    <>\n      <div className='links' onMouseOver={onMouseOver} onMouseOut={onMouseOut}>\n        <a className={shape === 'dc' && 'dc'} href=\"https://github.com/mikesteele/dual-captions\">dual-captions</a>\n      </div>\n      <Canvas>\n        <Thing shape={shape} previousShape={previousShape} />\n      </Canvas>\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}